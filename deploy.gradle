/*
 * Copyright (c) 2015-2018, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka'

// Import maven publish closure
apply from: "publish.gradle"

// Import meta data
apply from: "meta.gradle"

apply from: "utils.gradle"

version = libVersion
group = groupId

bintray {
    user = getSystemProperty("bintrayUser")
    key = getSystemProperty("bintrayApiKey")

//    configurations = ['archives']
    publications = ["mavenPublication"]
    publish = false
    override = false

    pkg {
        repo = repoName
        name = artifactId

        userOrg = "Virgil Security"
        desc = libDescription
        licenses = ["BSD 3-Clause"]

        vcsUrl = "https://github.com/VirgilSecurity/virgil-cryptoapi-kotlin.git"
        websiteUrl = 'https://github.com/VirgilSecurity/virgil-cryptoapi-kotlin'
        issueTrackerUrl = 'https://github.com/VirgilSecurity/virgil-cryptoapi-kotlin/issues'
        labels = ['virgil', 'virgil-cryptoapi', 'java', 'kotlin', 'android', 'maven', 'crypto', 'cryptography', 'encryption']
        githubRepo = 'VirgilSecurity/virgil-cryptoapi-kotlin'
        githubReleaseNotesFile = 'README.md'
        publicDownloadNumbers = true

        version {
            name = libVersion
            released = new Date()

            gpg {
                sign = true
                if (System.getenv("gpgPass") != null)
                    passphrase = System.getenv("gpgPass")
                else if (System.getProperty("gpgPass") != null)
                    passphrase = System.getProperty("gpgPass")
                else
                    throw new IllegalArgumentException("No gpg password provided")
            }

            mavenCentralSync {
                sync = false
                user = 'userToken' //OSS user token: mandatory
                password = 'paasword' //OSS user password: mandatory
                close = '0'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'jar'
            groupId groupId
            artifactId artifactId
            version libVersion
            name artifactId
        }
    }
}

task dokkaJavadoc(type: DokkaTask) {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

task dokkaJar(type: Jar, dependsOn: dokkaJavadoc) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Assembles Kotlin docs with Dokka"
    classifier = "javadoc"
    from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Assembles sources JAR"
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives dokkaJar
    archives sourcesJar
}
